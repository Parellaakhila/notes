selection sort
---------------------------
def selection_sort(arr):
    n=len(arr)
    for i in range(0,n-1):
        temp=i
        for j in range(i+1,n):
            if arr[j]<arr[temp]:
                temp=j
        arr[i],arr[temp]=arr[temp],arr[i]
arr=[64,25,12,22,11]
selection_sort(arr)
print(arr)


Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?

source code:

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        n=len(nums)
        for i in range(0,n-1):
            temp=i
            for j in range(i+1,n):
                if nums[j]<nums[temp]:
                    temp=j
            nums[i],nums[temp]=nums[temp],nums[i]
        return n
        """
        Do not return anything, modify nums in-place instead.
      """

Insertion sort
-----------------------------
def insertion_sort(arr):
    n=len(arr)
    for i in range(1,n):
        current=arr[i]
        j=i-1
        while j>=0 and arr[j]>current:
            arr[j+1]=arr[j]
            j-=1
        arr[j+1]=current
arr=[64,25,12,22,11]
insertion_sort(arr)
print(arr)

35.search insert position
-----------------------------------

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104


output:

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2

            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1

        return left

        
    